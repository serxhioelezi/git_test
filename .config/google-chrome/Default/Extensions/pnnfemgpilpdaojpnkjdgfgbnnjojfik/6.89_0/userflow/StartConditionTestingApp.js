import{r as e}from"./vendor.react.js";import{u as t}from"./client-context.js";import{B as o}from"./BuilderBar.js";import"./vendor.object-assign.js";import"./vendor.i18next.js";import"./vendor.react-i18next.js";import"./vendor.babel.runtime.js";import"./use-window-resize.js";import"./vendor.react-dom.js";import"./vendor.scheduler.js";import"./stylesheets.js";import"./vendor.fortawesome.pro-regular-svg-icons.js";import"./vendor.fortawesome.pro-solid-svg-icons.js";import"./userflow.js";import"./vendor.phoenix.js";import"./vendor.uuid.js";import"./flow-condition-types.js";import"./vendor.date-fns.js";import"./logomark.js";import"./vendor.obj-str.js";import"./vendor.fortawesome.pro-light-svg-icons.js";const r=({token:r})=>{const n=t(),[s,i]=e.useState("notIdentified"),[a,d]=e.useState(null),[l,c]=e.useState(null);let m=e.useRef(!1);e.useEffect((()=>()=>{m.current&&(m.current=!1,n.send({kind:"TestStartConditionCancel"}))}),[n]);const u=e.useCallback((()=>{n.setSessionStorageState((e=>({...e,activeApp:null,testStartConditionToken:void 0})))}),[n]);e.useEffect((()=>{let e=!1;return n.onceIdentified((async()=>{let t;i("loading"),m.current=!0;try{t=await n.send({kind:"TestStartCondition",token:r},{handlesRejection:!0})}catch(o){if(e)return;return i("error"),void c(o.humanMessage||"Sorry, something went wrong. Please try again or contact Userflow.")}e||(d(t),i("loaded"),n.on("private:testStartConditionSuccess",u))})),()=>{e=!0,n.off("private:testStartConditionSuccess",u)}}),[n,r,u]);const p=e.useCallback((async()=>{u(),n.getTargetEnv().postBuilderMessage({kind:"userflow:activateBuilder"})}),[n,u]);return e.createElement(o,{buttons:e.createElement("button",{className:"btn btn--default",onClick:()=>p()},"Back to Builder")},e.createElement("div",null,e.createElement("div",{className:"label"},"Testing: ",a?.flowName||"..."),"notIdentified"===s?e.createElement("div",null,"Waiting for your app to identify user..."):"loading"===s?e.createElement("div",null,"Loading..."):"error"===s?e.createElement("div",{className:"error"},l):e.createElement("div",{className:"error"},"Auto-start condition not triggered yet...")))};export default r;export{r as StartConditionTestingApp};
